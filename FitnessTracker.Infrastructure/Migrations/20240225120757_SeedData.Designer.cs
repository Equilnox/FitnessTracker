// <auto-generated />
using System;
using FitnessTracker.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FitnessTracker.Infrastructure.Migrations
{
    [DbContext(typeof(FitnessTrackerDbContext))]
    [Migration("20240225120757_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FitnessTracker.Infrastructure.Data.Models.Athlete", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("User identifier.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasComment("User age.");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("User first name.");

                    b.Property<int>("Height")
                        .HasColumnType("int")
                        .HasComment("User height.");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("User last name.");

                    b.Property<string>("ProfilePictureURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("User profile picture");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier.");

                    b.Property<double>("Weight")
                        .HasColumnType("float")
                        .HasComment("User weight.");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Athletes");

                    b.HasComment("Additional information of the user.");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 25,
                            FirstName = "TestAthleteOneFirstName",
                            Height = 175,
                            LastName = "TestAthleteOneLastName",
                            ProfilePictureURL = "",
                            UserId = "30d1ab20-e536-48ea-aa61-2db91207a880",
                            Weight = 65.0
                        },
                        new
                        {
                            Id = 2,
                            Age = 30,
                            FirstName = "TestAthleteTwoFirstName",
                            Height = 180,
                            LastName = "TestAthleteTwoLastName",
                            ProfilePictureURL = "",
                            UserId = "bcde2890-ad6a-4eb9-87da-59255f3cc66a",
                            Weight = 123.0
                        });
                });

            modelBuilder.Entity("FitnessTracker.Infrastructure.Data.Models.AthleteGym", b =>
                {
                    b.Property<int>("AthleteId")
                        .HasColumnType("int")
                        .HasComment("Athlete identifier");

                    b.Property<int>("GymId")
                        .HasColumnType("int")
                        .HasComment("Gym identifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("End date of membership");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Start date od membership");

                    b.HasKey("AthleteId", "GymId");

                    b.HasIndex("GymId");

                    b.ToTable("AthletesGyms");

                    b.HasData(
                        new
                        {
                            AthleteId = 1,
                            GymId = 1,
                            EndDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AthleteId = 2,
                            GymId = 1,
                            EndDate = new DateTime(2024, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("FitnessTracker.Infrastructure.Data.Models.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Exercise identifier.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Exercise description");

                    b.Property<int>("MuscleGroup")
                        .HasColumnType("int")
                        .HasComment("Exercise targeted muscle. Can be one of following: 1 = Compound move; 2 = Chest muscles; 3 = Back muscles; 4 = Legs muscles; 5 = Arms muscles; 6 = Abdominal muscles.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("Exercise name.");

                    b.HasKey("Id");

                    b.ToTable("Exercises");

                    b.HasComment("Exercises.");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "The push-up (press-up in British English) is a common calisthenics exercise beginning from the prone position. By raising and lowering the body using the arms, push-ups exercise the pectoral muscles, triceps, and anterior deltoids, with ancillary benefits to the rest of the deltoids, serratus anterior, coracobrachialis and the midsection as a whole.",
                            MuscleGroup = 0,
                            Name = "Pushups"
                        },
                        new
                        {
                            Id = 2,
                            Description = "The bench press, or chest press, is a weight training exercise where a person presses a weight upwards while lying horizontally on a weight training bench. Although the bench press is a compound movement, the muscles primarily used are the pectoralis major, the anterior deltoids, and the triceps, among other stabilizing muscles. A barbell is generally used to hold the weight, but a pair of dumbbells can also be used.",
                            MuscleGroup = 1,
                            Name = "Bench press"
                        },
                        new
                        {
                            Id = 3,
                            Description = "The pull-down exercise is a strength training exercise designed to develop the latissimus dorsi muscle. It performs the functions of downward rotation and depression of the scapulae combined with adduction and extension of the shoulder joint.",
                            MuscleGroup = 2,
                            Name = "Pull down"
                        },
                        new
                        {
                            Id = 4,
                            Description = "A squat is a strength exercise in which the trainee lowers their hips from a standing position and then stands back up. During the descent, the hip and knee joints flex while the ankle joint dorsiflexes; conversely the hip and knee joints extend and the ankle joint plantarflexes when standing up. Squats also help the hip muscles.",
                            MuscleGroup = 3,
                            Name = "Squat"
                        },
                        new
                        {
                            Id = 5,
                            Description = "The bicep curl mainly targets the biceps brachii, brachialis and brachioradialis muscles. The biceps is stronger at elbow flexion when the forearm is supinated (palms turned upward) and weaker when the forearm is pronated.[1] The brachioradialis is at its most effective when the palms are facing inward, and the brachialis is unaffected by forearm rotation. Therefore, the degree of forearm rotation affects the degree of muscle recruitment between the three muscles.",
                            MuscleGroup = 4,
                            Name = "Bicep curl"
                        },
                        new
                        {
                            Id = 6,
                            Description = "The sit-up (or curl-up) is an abdominal endurance training exercise to strengthen, tighten and tone the abdominal muscles. It is similar to a crunch (crunches target the rectus abdominis and also work the external and internal obliques), but sit-ups have a fuller range of motion and condition additional muscles.",
                            MuscleGroup = 5,
                            Name = "Sit up"
                        });
                });

            modelBuilder.Entity("FitnessTracker.Infrastructure.Data.Models.Gym", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Gym identifier.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Gym address");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Gym name.");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Gym owner full name.");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasComment("Gym phone number.");

                    b.Property<decimal>("PricePerMonth")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Gym membership price per month");

                    b.HasKey("Id");

                    b.ToTable("Gyms");

                    b.HasComment("Available gym");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Somewhere in the hood. Don't know this is just for testing.",
                            Name = "TestGymOne",
                            Owner = "TestGymOwner",
                            PhoneNumber = "0888888888",
                            PricePerMonth = 40m
                        });
                });

            modelBuilder.Entity("FitnessTracker.Infrastructure.Data.Models.Intensity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Intensity identifier.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int")
                        .HasComment("Exercise identifier.");

                    b.Property<int>("LiftedWeight")
                        .HasColumnType("int")
                        .HasComment("The amount of weight with witch the exercise was performed.");

                    b.Property<int>("Repetitions")
                        .HasColumnType("int")
                        .HasComment("Number of repetition per set.");

                    b.Property<int>("Seconds")
                        .HasColumnType("int")
                        .HasComment("The average amount of seconds elapsed for completing a single set");

                    b.Property<int>("Sets")
                        .HasColumnType("int")
                        .HasComment("Number of sets performed.");

                    b.Property<int>("WorkoutId")
                        .HasColumnType("int")
                        .HasComment("Workout identifier");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("Intensities");

                    b.HasComment("Intensity of a performed exercise.");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExerciseId = 2,
                            LiftedWeight = 40,
                            Repetitions = 10,
                            Seconds = 45,
                            Sets = 3,
                            WorkoutId = 1
                        },
                        new
                        {
                            Id = 2,
                            ExerciseId = 3,
                            LiftedWeight = 30,
                            Repetitions = 10,
                            Seconds = 45,
                            Sets = 3,
                            WorkoutId = 1
                        },
                        new
                        {
                            Id = 3,
                            ExerciseId = 4,
                            LiftedWeight = 50,
                            Repetitions = 10,
                            Seconds = 45,
                            Sets = 3,
                            WorkoutId = 1
                        },
                        new
                        {
                            Id = 4,
                            ExerciseId = 5,
                            LiftedWeight = 15,
                            Repetitions = 10,
                            Seconds = 45,
                            Sets = 3,
                            WorkoutId = 1
                        },
                        new
                        {
                            Id = 5,
                            ExerciseId = 6,
                            LiftedWeight = 30,
                            Repetitions = 15,
                            Seconds = 60,
                            Sets = 3,
                            WorkoutId = 1
                        },
                        new
                        {
                            Id = 6,
                            ExerciseId = 2,
                            LiftedWeight = 40,
                            Repetitions = 10,
                            Seconds = 45,
                            Sets = 3,
                            WorkoutId = 2
                        },
                        new
                        {
                            Id = 7,
                            ExerciseId = 3,
                            LiftedWeight = 30,
                            Repetitions = 10,
                            Seconds = 45,
                            Sets = 3,
                            WorkoutId = 2
                        },
                        new
                        {
                            Id = 8,
                            ExerciseId = 4,
                            LiftedWeight = 50,
                            Repetitions = 10,
                            Seconds = 45,
                            Sets = 3,
                            WorkoutId = 2
                        },
                        new
                        {
                            Id = 9,
                            ExerciseId = 5,
                            LiftedWeight = 15,
                            Repetitions = 10,
                            Seconds = 45,
                            Sets = 3,
                            WorkoutId = 2
                        },
                        new
                        {
                            Id = 10,
                            ExerciseId = 6,
                            LiftedWeight = 30,
                            Repetitions = 15,
                            Seconds = 60,
                            Sets = 3,
                            WorkoutId = 2
                        },
                        new
                        {
                            Id = 11,
                            ExerciseId = 2,
                            LiftedWeight = 40,
                            Repetitions = 10,
                            Seconds = 45,
                            Sets = 3,
                            WorkoutId = 3
                        },
                        new
                        {
                            Id = 12,
                            ExerciseId = 3,
                            LiftedWeight = 30,
                            Repetitions = 10,
                            Seconds = 45,
                            Sets = 3,
                            WorkoutId = 3
                        },
                        new
                        {
                            Id = 13,
                            ExerciseId = 4,
                            LiftedWeight = 50,
                            Repetitions = 10,
                            Seconds = 45,
                            Sets = 3,
                            WorkoutId = 3
                        },
                        new
                        {
                            Id = 14,
                            ExerciseId = 5,
                            LiftedWeight = 15,
                            Repetitions = 10,
                            Seconds = 45,
                            Sets = 3,
                            WorkoutId = 3
                        },
                        new
                        {
                            Id = 15,
                            ExerciseId = 6,
                            LiftedWeight = 30,
                            Repetitions = 15,
                            Seconds = 60,
                            Sets = 3,
                            WorkoutId = 3
                        },
                        new
                        {
                            Id = 16,
                            ExerciseId = 2,
                            LiftedWeight = 45,
                            Repetitions = 10,
                            Seconds = 45,
                            Sets = 3,
                            WorkoutId = 4
                        },
                        new
                        {
                            Id = 17,
                            ExerciseId = 3,
                            LiftedWeight = 35,
                            Repetitions = 10,
                            Seconds = 45,
                            Sets = 3,
                            WorkoutId = 4
                        },
                        new
                        {
                            Id = 18,
                            ExerciseId = 4,
                            LiftedWeight = 50,
                            Repetitions = 10,
                            Seconds = 45,
                            Sets = 3,
                            WorkoutId = 4
                        },
                        new
                        {
                            Id = 19,
                            ExerciseId = 5,
                            LiftedWeight = 15,
                            Repetitions = 10,
                            Seconds = 45,
                            Sets = 3,
                            WorkoutId = 4
                        },
                        new
                        {
                            Id = 20,
                            ExerciseId = 6,
                            LiftedWeight = 30,
                            Repetitions = 20,
                            Seconds = 60,
                            Sets = 3,
                            WorkoutId = 4
                        },
                        new
                        {
                            Id = 21,
                            ExerciseId = 2,
                            LiftedWeight = 45,
                            Repetitions = 10,
                            Seconds = 45,
                            Sets = 3,
                            WorkoutId = 5
                        },
                        new
                        {
                            Id = 22,
                            ExerciseId = 3,
                            LiftedWeight = 35,
                            Repetitions = 10,
                            Seconds = 45,
                            Sets = 3,
                            WorkoutId = 5
                        },
                        new
                        {
                            Id = 23,
                            ExerciseId = 4,
                            LiftedWeight = 50,
                            Repetitions = 10,
                            Seconds = 45,
                            Sets = 3,
                            WorkoutId = 5
                        },
                        new
                        {
                            Id = 24,
                            ExerciseId = 5,
                            LiftedWeight = 15,
                            Repetitions = 10,
                            Seconds = 45,
                            Sets = 3,
                            WorkoutId = 5
                        },
                        new
                        {
                            Id = 25,
                            ExerciseId = 6,
                            LiftedWeight = 30,
                            Repetitions = 20,
                            Seconds = 60,
                            Sets = 3,
                            WorkoutId = 5
                        },
                        new
                        {
                            Id = 26,
                            ExerciseId = 2,
                            LiftedWeight = 45,
                            Repetitions = 10,
                            Seconds = 45,
                            Sets = 3,
                            WorkoutId = 6
                        },
                        new
                        {
                            Id = 27,
                            ExerciseId = 3,
                            LiftedWeight = 35,
                            Repetitions = 10,
                            Seconds = 45,
                            Sets = 3,
                            WorkoutId = 6
                        },
                        new
                        {
                            Id = 28,
                            ExerciseId = 4,
                            LiftedWeight = 50,
                            Repetitions = 10,
                            Seconds = 45,
                            Sets = 3,
                            WorkoutId = 6
                        },
                        new
                        {
                            Id = 29,
                            ExerciseId = 5,
                            LiftedWeight = 15,
                            Repetitions = 10,
                            Seconds = 45,
                            Sets = 3,
                            WorkoutId = 6
                        },
                        new
                        {
                            Id = 30,
                            ExerciseId = 6,
                            LiftedWeight = 30,
                            Repetitions = 20,
                            Seconds = 60,
                            Sets = 3,
                            WorkoutId = 6
                        });
                });

            modelBuilder.Entity("FitnessTracker.Infrastructure.Data.Models.Workout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Workout identifier.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AthleteId")
                        .HasColumnType("int")
                        .HasComment("User identifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("The day of the workout");

                    b.Property<int>("GymId")
                        .HasColumnType("int")
                        .HasComment("Gym identifier");

                    b.Property<int>("WorkoutType")
                        .HasColumnType("int")
                        .HasComment("Workout type. Can be one of following: 1 = Full Body; 2 = Chest workout; 3 = Back workout; 4 = Legs workout; 5 = Arms workout; 6 = Abdominal workout; 7 = HIIT workout.");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId");

                    b.HasIndex("GymId");

                    b.ToTable("Workouts");

                    b.HasComment("Performed workout.");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AthleteId = 1,
                            Date = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GymId = 1,
                            WorkoutType = 0
                        },
                        new
                        {
                            Id = 2,
                            AthleteId = 1,
                            Date = new DateTime(2024, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GymId = 1,
                            WorkoutType = 0
                        },
                        new
                        {
                            Id = 3,
                            AthleteId = 1,
                            Date = new DateTime(2024, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GymId = 1,
                            WorkoutType = 0
                        },
                        new
                        {
                            Id = 4,
                            AthleteId = 2,
                            Date = new DateTime(2024, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GymId = 1,
                            WorkoutType = 0
                        },
                        new
                        {
                            Id = 5,
                            AthleteId = 1,
                            Date = new DateTime(2024, 2, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GymId = 1,
                            WorkoutType = 0
                        },
                        new
                        {
                            Id = 6,
                            AthleteId = 2,
                            Date = new DateTime(2024, 2, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GymId = 1,
                            WorkoutType = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "30d1ab20-e536-48ea-aa61-2db91207a880",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b30d03d4-a9d0-41aa-b0cc-4ff86047d3fb",
                            Email = "testOne@mail.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "testOne@mail.bg",
                            NormalizedUserName = "testOne@mail.bg",
                            PasswordHash = "AQAAAAEAACcQAAAAEPM51fzgUeyinpg6MZGUizfUWzXo8l12QlehGKvTpDWL0r+ygd0B4AgYK9yvwDVj5Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7548d7b6-c378-4b96-9291-8471912d4acb",
                            TwoFactorEnabled = false,
                            UserName = "testOne@mail.bg"
                        },
                        new
                        {
                            Id = "bcde2890-ad6a-4eb9-87da-59255f3cc66a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "708be3a6-fd68-4d93-861c-aea632bb2e49",
                            Email = "testTwo@mail.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "testTwo@mail.bg",
                            NormalizedUserName = "testTwo@mail.bg",
                            PasswordHash = "AQAAAAEAACcQAAAAEPO970SgzjXjRCJmPqiCJBb1CBq6iPlrlLHU31tWXxopmHc6U8FXFuzLDNuNGhgfnQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b04865d4-10ee-4862-92fd-682008a30f83",
                            TwoFactorEnabled = false,
                            UserName = "testTwo@mail.bg"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FitnessTracker.Infrastructure.Data.Models.Athlete", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessTracker.Infrastructure.Data.Models.AthleteGym", b =>
                {
                    b.HasOne("FitnessTracker.Infrastructure.Data.Models.Athlete", "Athlete")
                        .WithMany("AthletesGym")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessTracker.Infrastructure.Data.Models.Gym", "Gym")
                        .WithMany("AthletesGyms")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");

                    b.Navigation("Gym");
                });

            modelBuilder.Entity("FitnessTracker.Infrastructure.Data.Models.Intensity", b =>
                {
                    b.HasOne("FitnessTracker.Infrastructure.Data.Models.Exercise", "Exercise")
                        .WithMany("Intensities")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessTracker.Infrastructure.Data.Models.Workout", "Workout")
                        .WithMany("Intensities")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("FitnessTracker.Infrastructure.Data.Models.Workout", b =>
                {
                    b.HasOne("FitnessTracker.Infrastructure.Data.Models.Athlete", "Athlete")
                        .WithMany("Workouts")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessTracker.Infrastructure.Data.Models.Gym", "Gym")
                        .WithMany("Workouts")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");

                    b.Navigation("Gym");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FitnessTracker.Infrastructure.Data.Models.Athlete", b =>
                {
                    b.Navigation("AthletesGym");

                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("FitnessTracker.Infrastructure.Data.Models.Exercise", b =>
                {
                    b.Navigation("Intensities");
                });

            modelBuilder.Entity("FitnessTracker.Infrastructure.Data.Models.Gym", b =>
                {
                    b.Navigation("AthletesGyms");

                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("FitnessTracker.Infrastructure.Data.Models.Workout", b =>
                {
                    b.Navigation("Intensities");
                });
#pragma warning restore 612, 618
        }
    }
}
